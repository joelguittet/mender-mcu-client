#ifndef __ESP_PARTITION_H__
#define __ESP_PARTITION_H__

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <esp_err.h>

typedef enum {
    ESP_PARTITION_TYPE_APP  = 0x00,
    ESP_PARTITION_TYPE_DATA = 0x01,
} esp_partition_type_t;

typedef enum {
    ESP_PARTITION_SUBTYPE_APP_FACTORY = 0x00,
    ESP_PARTITION_SUBTYPE_APP_OTA_MIN = 0x10,
    ESP_PARTITION_SUBTYPE_APP_OTA_0   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 0,
    ESP_PARTITION_SUBTYPE_APP_OTA_1   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 1,
    ESP_PARTITION_SUBTYPE_APP_OTA_2   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 2,
    ESP_PARTITION_SUBTYPE_APP_OTA_3   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 3,
    ESP_PARTITION_SUBTYPE_APP_OTA_4   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 4,
    ESP_PARTITION_SUBTYPE_APP_OTA_5   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 5,
    ESP_PARTITION_SUBTYPE_APP_OTA_6   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 6,
    ESP_PARTITION_SUBTYPE_APP_OTA_7   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 7,
    ESP_PARTITION_SUBTYPE_APP_OTA_8   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 8,
    ESP_PARTITION_SUBTYPE_APP_OTA_9   = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 9,
    ESP_PARTITION_SUBTYPE_APP_OTA_10  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 10,
    ESP_PARTITION_SUBTYPE_APP_OTA_11  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 11,
    ESP_PARTITION_SUBTYPE_APP_OTA_12  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 12,
    ESP_PARTITION_SUBTYPE_APP_OTA_13  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 13,
    ESP_PARTITION_SUBTYPE_APP_OTA_14  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 14,
    ESP_PARTITION_SUBTYPE_APP_OTA_15  = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 15,
    ESP_PARTITION_SUBTYPE_APP_OTA_MAX = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 16,
    ESP_PARTITION_SUBTYPE_APP_TEST    = 0x20,

    ESP_PARTITION_SUBTYPE_DATA_OTA       = 0x00,
    ESP_PARTITION_SUBTYPE_DATA_PHY       = 0x01,
    ESP_PARTITION_SUBTYPE_DATA_NVS       = 0x02,
    ESP_PARTITION_SUBTYPE_DATA_COREDUMP  = 0x03,
    ESP_PARTITION_SUBTYPE_DATA_NVS_KEYS  = 0x04,
    ESP_PARTITION_SUBTYPE_DATA_EFUSE_EM  = 0x05,
    ESP_PARTITION_SUBTYPE_DATA_UNDEFINED = 0x06,

    ESP_PARTITION_SUBTYPE_DATA_ESPHTTPD = 0x80,
    ESP_PARTITION_SUBTYPE_DATA_FAT      = 0x81,
    ESP_PARTITION_SUBTYPE_DATA_SPIFFS   = 0x82,

    ESP_PARTITION_SUBTYPE_ANY = 0xff,
} esp_partition_subtype_t;

typedef struct esp_partition_iterator_opaque_ *esp_partition_iterator_t;

typedef struct {
    void *                  flash_chip;
    esp_partition_type_t    type;
    esp_partition_subtype_t subtype;
    uint32_t                address;
    uint32_t                size;
    char                    label[17];
    bool                    encrypted;
} esp_partition_t;

#endif /* __ESP_PARTITION_H__ */
